import numpy as np
import math
from scipy import stats
import datetime
import subprocess

import progressbar
from multiprocessing import cpu_count, Pool


'''
The SVM classifier is achieved by using SVM-Light implmenetation by Joachims, 1999
subporocess.run(args) run the command described by args. Wait for command to complete, then return a CompletedProcess instance
'''

'''
HOW TO USE SVM-LIGHT
svm_learn example1/train.dat example1/model
svm_classify example1/test.dat example1/model example1/predictions
'''


def prepare_data_svm(train_test_matrix, train_test_size, test=False):
    # para train_test_matrix: training/test matrix generated by bow_feat
    # para train_test_size: training/test set size
    # para test: whether training data or test data preparation
    # type train_test_matrix: list(list(integer))

    path = './svm_models/test.dat' if test else './svm_models/train.dat'

    train_test_class_vector = np.hstack((np.ones(train_test_size)*-1, np.ones(train_test_size)))
    train_test_data = list()
    feat_size = len(train_test_matrix[0])

    f = open(path, 'w', encoding='utf-8')
    bar = progressbar.ProgressBar()
    for i in bar(range(len(train_test_class_vector))):
        train_test_data.append(["%d:%f" % (j+1, train_test_matrix[i][j]) for j in range(feat_size)])
        f.write("%d " % train_test_class_vector[i])
        for j in range(len(train_test_data[i])):
            f.write("%s " % train_test_data[i][j])
        f.write("\n")

    f.close()


# save the readme file of SVM model
def save_readme():
    readme_notes = np.array(["This SVM model is trained on ", str(datetime.datetime.now())])
    np.savetxt("./svm_models/readme.txt", readme_notes, fmt="%s")


# train the SVM-Light classifier
def train_svm_classifier():
    print("\ntrain the SVM-Light classifier ... \n")
    subprocess.run(["./svm-light/svm_learn", "./svm_models/train.dat", "./svm_models/model"])
    save_readme()
    print("\ntraining, DONE.")
    

# test the SVM-Light classifier
def test_svm_classifier():
    print("\ntest the SVM-Light classifier ... \n")
    subprocess.run(["./svm-light/svm_classify", "./svm_models/test.dat", "./svm_models/model", "./svm_models/predictions"])
    print("\ntest, DONE.")